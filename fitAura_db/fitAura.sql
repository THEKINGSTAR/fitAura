/*
THIS SCRIPT CREATES THE FITAURA_DB DATABASE AND THE NECESSARY TABLES,
INCLUDING USERS,
EXERCISES,
USER_EXERCISES,
LOGS,
FOOD_CONSUMPTION,
AND DASHBOARD.

IT ALSO INCLUDES TRIGGERS TO KEEP THE DASHBOARD TABLE UPDATED
WITH THE LATEST DATA ON CALORIES BURNED AND CONSUMED.

ADDITIONALLY, THERE's a view user_activity_summary for easy access to user activity summaries.
*/

CREATE DATABASE IF NOT EXISTS fitAura_DB;

USE fitAura_DB;

-- USERS table
CREATE TABLE IF NOT EXISTS USERS (
    ID INT NOT NULL AUTO_INCREMENT,
    EMAIL VARCHAR(255) NOT NULL UNIQUE,
    FIRST_NAME VARCHAR(255),
    LAST_NAME VARCHAR(255),
    VALID_EMAIL BOOLEAN NOT NULL DEFAULT 0,
    PASSWORD_HASH VARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (ID)
);

-- EXERCISES table
CREATE TABLE IF NOT EXISTS EXERCISES (
    ID INT NOT NULL AUTO_INCREMENT,
    NAME VARCHAR(255) NOT NULL,
    DESCRIPTION TEXT,
    CALORIES_BURN_PER_MIN INT NOT NULL,
    PRIMARY KEY (ID)
);

-- USER_EXERCISES table
CREATE TABLE IF NOT EXISTS USER_EXERCISES (
    ID INT NOT NULL AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    EXERCISE_ID INT NOT NULL,
    DURATION_MIN INT NOT NULL,
    DATE DATE NOT NULL,
    CALORIES_BURNED INT NOT NULL,
    PRIMARY KEY (ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID),
    FOREIGN KEY (EXERCISE_ID) REFERENCES EXERCISES(ID)
);

-- Trigger to calculate calories burned
DELIMITER //

CREATE TRIGGER calculate_calories_burned
BEFORE INSERT ON USER_EXERCISES
FOR EACH ROW
BEGIN
    DECLARE cal_per_min INT;
    SELECT CALORIES_BURN_PER_MIN INTO cal_per_min FROM EXERCISES WHERE ID = NEW.EXERCISE_ID;
    SET NEW.CALORIES_BURNED = NEW.DURATION_MIN * cal_per_min;
END //

DELIMITER ;

-- LOGS table
CREATE TABLE IF NOT EXISTS LOGS (
    ID INT NOT NULL AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    ACTIVITY_TYPE VARCHAR(255) NOT NULL,
    ACTIVITY_DATE DATE NOT NULL,
    DURATION_MIN INT,
    CALORIES_BURNED INT,
    PRIMARY KEY (ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

-- FOOD_CONSUMPTION table
CREATE TABLE IF NOT EXISTS FOOD_CONSUMPTION (
    ID INT NOT NULL AUTO_INCREMENT,
    USER_ID INT NOT NULL,
    FOOD_NAME VARCHAR(255) NOT NULL,
    CALORIES_CONSUMED INT NOT NULL,
    CONSUMED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

-- DASHBOARD table (aggregated data for the dashboard)
CREATE TABLE IF NOT EXISTS DASHBOARD (
    USER_ID INT NOT NULL,
    TOTAL_CALORIES_BURNED INT DEFAULT 0,
    TOTAL_CALORIES_CONSUMED INT DEFAULT 0,
    LAST_UPDATED TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    PRIMARY KEY (USER_ID),
    FOREIGN KEY (USER_ID) REFERENCES USERS(ID)
);

-- TRIGGERS to update DASHBOARD table
DELIMITER //

CREATE TRIGGER update_dashboard_after_insert_exercise
AFTER INSERT ON USER_EXERCISES
FOR EACH ROW
BEGIN
    INSERT INTO DASHBOARD (USER_ID, TOTAL_CALORIES_BURNED, TOTAL_CALORIES_CONSUMED)
    VALUES (NEW.USER_ID, NEW.CALORIES_BURNED, 0)
    ON DUPLICATE KEY UPDATE
    TOTAL_CALORIES_BURNED = TOTAL_CALORIES_BURNED + NEW.CALORIES_BURNED;
END //

CREATE TRIGGER update_dashboard_after_insert_food
AFTER INSERT ON FOOD_CONSUMPTION
FOR EACH ROW
BEGIN
    INSERT INTO DASHBOARD (USER_ID, TOTAL_CALORIES_BURNED, TOTAL_CALORIES_CONSUMED)
    VALUES (NEW.USER_ID, 0, NEW.CALORIES_CONSUMED)
    ON DUPLICATE KEY UPDATE
    TOTAL_CALORIES_CONSUMED = TOTAL_CALORIES_CONSUMED + NEW.CALORIES_CONSUMED;
END //

DELIMITER ;

-- VIEW for user activity summary
CREATE VIEW user_activity_summary AS
SELECT 
    u.ID AS user_id,
    u.EMAIL AS user_email,
    COALESCE(SUM(ue.CALORIES_BURNED), 0) AS total_calories_burned,
    COALESCE(SUM(fc.CALORIES_CONSUMED), 0) AS total_calories_consumed
FROM 
    USERS u
LEFT JOIN 
    USER_EXERCISES ue ON u.ID = ue.USER_ID
LEFT JOIN 
    FOOD_CONSUMPTION fc ON u.ID = fc.USER_ID
GROUP BY 
    u.ID, u.EMAIL;
